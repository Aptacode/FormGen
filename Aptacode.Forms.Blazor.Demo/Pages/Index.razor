@page "/"
@using Aptacode.Forms.Shared.Models.Elements
@using Aptacode.Forms.Shared.Models.Elements.Fields.ValidationRules
@using Aptacode.Forms.Shared.ViewModels
@using Aptacode.Forms.Shared.ViewModels.Events

<h1>
    Aptacode.Forms.Blazor.Demo
</h1>
<Divider Type="DividerType.Dashed"/>

<Aptacode.Forms.Blazor.Components.Form ViewModel="@FormModel"/>

<Divider Type="DividerType.Dashed"/>

<Table>
    <TableHeader>
        <Alert Color="Color.Primary" Visible="true">
            Event Log
        </Alert>
        <TableRow>
            <TableHeaderCell>Time</TableHeaderCell>
            <TableHeaderCell>Event</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var formEvent in GetRecentEvents())
        {
            <TableRow>
                <TableRowHeader>@formEvent.Time.ToString("HH:mm:ss")</TableRowHeader>
                <TableRowCell>@formEvent.ToString()</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<Divider Type="DividerType.Dashed"/>


@code{
    public FormViewModel FormModel { get; set; }
    public List<FormEventArgs> FormEventLog { get; set; }

    public IEnumerable<FormEventArgs> GetRecentEvents() => FormEventLog.TakeLast(10).Reverse();


    protected override Task OnInitializedAsync()
    {
        FormEventLog = new List<FormEventArgs>();
        FormModel = CreateForm();
        FormModel.Setup();

        FormModel.OnFormEvent += (s, e) =>
        {
            FormEventLog.Add(e);
            InvokeAsync(StateHasChanged);
        };

        return Task.CompletedTask;
    }

    public static FormViewModel CreateForm()
    {
        var newForm = FormBuilder.CreateForm("New Form", "Demo Form");
        var testGroup1 = newForm.AddGroup("Test Group 1", "Test Group 1 Title");

        testGroup1.AddRow("htmlRow", 1).AddColumn("htmlColumn", 1, FormBuilder.CreateHtml("htmlContent", ElementLabel.Above("HtmlContent"), "<h1><em>Test HTML Content</em></h1>\r\n<p>Test</p>\r\n<p><strong><span style=\"background-color: #0000ff;\">Woop</span> woop</strong></p>\r\n<p><span style=\"text-decoration: underline; color: #003366;\">TEST od&nbsp;&nbsp; </span></p>"));

        var nameRow = testGroup1.AddRow("nameRow", 1);

        nameRow.AddColumn("firstNameColumn", 1,
            FormBuilder.CreateText("firstName", ElementLabel.Left("First Name: "), "First Name", new TextFieldLengthValidationRule(EqualityOperator.GreaterThan, 2), new TextFieldLengthValidationRule(EqualityOperator.LessThan, 10)));

        nameRow.AddColumn("lastNameColumn", 1,
            FormBuilder.CreateText("lastName", ElementLabel.Left("Last Name: "), "Last Name", new TextFieldLengthValidationRule(EqualityOperator.GreaterThan, 2), new TextFieldLengthValidationRule(EqualityOperator.LessThan, 10)));

        testGroup1.AddRow("CheckBox", 1).AddColumn("CheckBox", 1, FormBuilder.CreateCheckBox("CheckBox", ElementLabel.Above("Do you accept the terms and conditions"), "I Agree", false));

        testGroup1.AddRow("comboBox", 1).AddColumn("comboBox", 1, FormBuilder.CreateComboBox("comboBox", ElementLabel.Above("How many years experiance have you got?"), new[] {"0-1", "1-5", "5+"}, "0-1"));
        testGroup1.AddRow("submit", 1).AddColumn("submit", 1, FormBuilder.CreateButton("submit", ElementLabel.None, "Submit"));
        return newForm;
    }

}