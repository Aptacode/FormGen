@page "/test"

@using Aptacode.Forms
@using Aptacode.Forms.Elements
@using Aptacode.Forms.Elements.Fields
@using Aptacode.Forms.Elements.Fields.ValidationRules
@using Aptacode.Forms.Enums
@using Newtonsoft.Json

<div class="container">
    <div class="row">
        <EditForm class="w-100" Model="MyForm" OnSubmit="@Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (var group in MyForm.Groups)
            {
                @*<p style="color:blue">@group.Label</p>*@

                @foreach (var row in group.Rows)
                {
                    @*<p style="color:green">Row Span: @row.Span</p>*@

                    @foreach (var col in row.Columns)
                    {
                        if (col.Element.GetType() == typeof(HtmlElement))
                        {
                            var html = (HtmlElement)col.Element;

                            <div>
                                @((MarkupString)html.Content)
                            </div>
                        }
                        else if (col.Element.GetType() == typeof(TextField))
                        {
                            var textfield = (TextField)col.Element;

                            <div class="form-group row">
                                <span class="col-sm-5 align-self-center text-right">@textfield.Label</span>
                                <input type="text" class="col-sm-7 form-control" @bind-value="textfield.Content" />
                            </div>
                        }
                        else if (col.Element.GetType() == typeof(CheckBoxField))
                        {
                            var checkbox = (CheckBoxField)col.Element;
                            @IncreaseTempId()

                            <div class="form-group row">
                                <span class="col-sm-5 align-self-center text-right">@checkbox.Label</span>

                                <div class="col-sm-7 custom-control custom-checkbox">
                                    <input type="checkbox" class="custom-control-input" id="@tempid">
                                    <label class="custom-control-label" for="@tempid">@checkbox.Content</label>
                                </div>
                            </div>
                        }
                        else if (col.Element.GetType() == typeof(ComboBoxField))
                        {
                            var combobox = (ComboBoxField)col.Element;

                            <div class="form-group row">
                                <span class="col-sm-5 align-self-center text-right">@combobox.Label</span>

                                <select class="col-sm-7 custom-select" required>
                                    @foreach (var item in combobox.Items)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                </select>
                            </div>
                        }
                        else if (col.Element.GetType() == typeof(ButtonElement))
                        {
                            var button = (ButtonElement) col.Element;

                            <div class="form-group row">
                                <div class="col-sm-5"></div>
                                <div class="col-sm-7">
                                    <button class="btn btn-secondary w-100" type="@button.Type">@button.Content</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            //Unknown control
                        }

                    }
                }
            }

        </EditForm>
    </div>
</div>




@code {

    [Parameter]
    public string SerializedForm { get; set; }

    public Form MyForm { get; set; }

    protected override void OnInitialized()
    {
        MyForm = new Form("form1", "Test Form",
    new[]
    {
                    new FormGroup("Test Form Group", new[]
                {
                        new FormRow(1, new[]
                    {
                            new FormColumn(1,
                                new HtmlElement("Paragraph",
                                    "<h1><em>Test HTML Content</em></h1>\r\n<p>Test</p>\r\n<p><strong><span style=\"background-color: #0000ff;\">Woop</span> woop</strong></p>\r\n<p><span style=\"text-decoration: underline; color: #003366;\">TEST od&nbsp;&nbsp; </span></p>",
                                    LabelPosition.AboveElement, "Sample HTML Content"))
                        }),

                        new FormRow(1, new[]
                    {
                            new FormColumn(1,
                                new TextField("firstName", LabelPosition.AboveElement, "First Name",
                                    new ValidationRule<TextField>[]
                                {
                                        new TextFieldLengthValidationRule(EqualityOperator.GreaterThan, 2)
                                    })
                            ),
                            new FormColumn(1,
                                new TextField("lastName", LabelPosition.AboveElement, "Last Name",
                                    new ValidationRule<TextField>[]
                                {
                                        new TextFieldLengthValidationRule(
                                            EqualityOperator.LessThan | EqualityOperator.EqualTo, 10)
                                    })
                            )
                        }),

                        new FormRow(1, new[]
                    {
                            new FormColumn(1,
                                new CheckBoxField("receiveEmail", LabelPosition.AboveElement,
                                    "Do you accept the terms and conditions",
                                    new ValidationRule<CheckBoxField>[]
                                {
                                        new CheckBoxCheckedValidationRule(true)
                                    }, "I Agree", false)
                            )
                        }),

                        new FormRow(1, new[]
                    {
                            new FormColumn(1,
                                new ComboBoxField("yearsOfExperience", LabelPosition.AboveElement,
                                    "Years of Experience",
                                    new ValidationRule<ComboBoxField>[]
                                {
                                        new ComboBoxSelectionRequiredValidationRule()
                                    }, new[] {"0-1", "1-5", "5+"})
                            )
                        }),

                        new FormRow(1, new[]
                    {
                            new FormColumn(1,
                                new ButtonElement("SubmitButton",
                                    "Submit", LabelPosition.AboveElement, "")
                            )
                        })
                    })
        });

        var form = JsonConvert.SerializeObject(MyForm);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        //MyForm = JsonConvert.DeserializeObject<Form>(SerializedForm);

        base.OnParametersSet();
    }

    private void Submit()
    {
        if (MyForm.IsValid)
        {
            var formResults = MyForm.GetResult();
            //File.WriteAllText("./results.json", JsonConvert.SerializeObject(formResults, Formatting.Indented));

            //MessageBox.Show("Submitted");
        }
        else
        {
            //MessageBox.Show(_myForm.GetValidationMessage());
        }
    }

    private int tempid;
    private string IncreaseTempId()
    {
        tempid++;
        return "";
    }
}
